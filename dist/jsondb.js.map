{"version":3,"sources":["../src/jsondb.js"],"names":["promise","connect","fn","Promise","resolve","reject","defaults","storage","dbPath","substr","process","cwd","db","state","getState","Object","keys","length","write","JsonDBQuery","params","Array","isArray","args","findManyById","id","findById","databases","models","jsondb","TABLE","table","data","get","value","catch","stdout","error","query","obj","find","ids","map","reduce","previous","item","insert","filter","record","JsonDBMutation","push","remove","assign"],"mappings":"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","file":"jsondb.js","sourcesContent":["import low from 'lowdb';\nimport autobind from 'class-autobind';\nimport uuid from 'uuid/v4';\n\nexport function promise (fn) {\n  return new Promise((resolve, reject) => fn(resolve, reject));\n}\n\nexport function connect ({ defaults = null, storage }) {\n  // path to json database file\n  const dbPath = storage.substr(0, 1) === '/'\n    ? `${process.cwd()}${storage.substr(0, 1)}`\n    : `${process.cwd()}/${storage}`;\n\n  // initialize database;\n  const db = low(dbPath);\n\n  // get database state\n  const state = db.getState();\n\n  // if database is empty add default tables\n  if (Object.keys(state).length === 0) {\n    db.defaults(defaults).write();\n  }\n  \n  return db;\n}\n\nexport class JsonDBQuery {\n  constructor () {\n    autobind(this);\n  }\n\n  resolve (params) {\n    return Array.isArray(params.args)\n      ? this.findManyById({ ...params, args: { id: params.args } })\n      : this.findById(params);\n  }\n\n  findAll ({ args, databases, models }) {\n    const db = databases.jsondb;\n    const TABLE = this.table;\n\n    return promise((resolve, reject) => {\n      const data = db.get(TABLE).value();\n      resolve(data);\n    })\n      .catch(error => process.stdout.write(error));\n  }\n\n  findById ({ query, args, databases, models }) {\n    const db = databases.jsondb;\n    let obj = args || query;\n    const TABLE = this.table;\n\n    return promise((resolve, reject) => {\n      const data = db\n        .get(TABLE)\n        .find({ id : obj.id })\n        .value();\n\n      resolve(data);    \n    })\n      .catch(error => process.stdout.write(error));\n  }\n\n  findManyById ({ query, args, databases, models }) {\n    const db = databases.jsondb;\n    let obj = args || query;\n    const TABLE = this.table;\n    const ids = obj.id.map(id => ({ id }));\n\n    return promise((resolve, reject) => {\n      const table = db.get(TABLE).value();\n\n      const data = ids.reduce((previous, item) => {\n        const insert = table.filter(record => record.id === item.id);\n\n        return [\n          ...previous,\n          ...insert\n        ];\n      }, []);\n\n      resolve(data);\n    })\n      .catch(error => process.stdout.write(error));\n  }\n}\n\nexport class JsonDBMutation {\n  constructor () {\n    autobind(this);\n  }\n\n  create ({ args, databases, models }) {\n    const db = databases.jsondb;\n    const TABLE = this.table;\n    const id = uuid();\n\n    return promise((resolve, reject) => {\n      const data = db.get(TABLE)\n        .push({ ...args, id })\n        .write()\n        .filter(item => item.id === id);\n\n      resolve(data[0]);\n    });\n  }\n\n  remove ({ args, databases, models }) {\n    const db = databases.jsondb;\n    const id = args.id;\n    const TABLE = this.table;\n\n    return promise((resolve, reject) => {\n      const data = db.get(TABLE)\n        .remove({ id: args.id })\n        .write()\n        .filter(item => item.id === id);\n\n      resolve(data[0]);\n    })\n      .catch(error => process.stdout.write(error));\n  }\n\n  update ({ args, databases, models }) {\n    const db = databases.jsondb;\n    const id = args.id;\n    const TABLE = this.table;\n\n    return promise((resolve, reject) => {\n      const data = db.get(TABLE)\n        .find({ id: args.id })\n        .assign({ ...args })\n        .write()\n        .filter(item => item.id === id);\n\n      resolve(data[0]);\n    })\n      .catch(error => process.stdout.write(error));\n  }\n\n  // createMany\n  // deleteMany\n  // removeMany\n  // updateMany\n}\n"]}